openapi: 3.0.3
info:
  title: Task Management API
  version: 1.0.0
  description: API for managing tasks with JWT authentication
servers:
  - url: http://localhost:8000/api

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Returns JWT token

  /auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Returns JWT token

  /tasks:
    get:
      summary: Get all tasks
      tags:
        - Tasks
      parameters:
        - in: query
          name: status
          schema:
            type: string
        - in: query
          name: search
          schema:
            type: string
        - in: query
          name: dueDate
          schema:
            type: string
            format: date
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of tasks

    post:
      summary: Create a new task
      tags:
        - Tasks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [Pending, In Progress, Completed]
                assignedUser:
                  type: string
                dueDate:
                  type: string
                  format: date
      responses:
        '200':
          description: Task created

  /tasks/{id}:
    get:
      summary: Get a task by ID
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a task

    put:
      summary: Update a task by ID
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                status:
                  type: string
                  enum: [Pending, In Progress, Completed]
                assignedUser:
                  type: string
                dueDate:
                  type: string
                  format: date
      responses:
        '200':
          description: Task updated

    delete:
      summary: Delete a task by ID
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted

  /users:
    get:
      summary: Get all users
      tags:
        - Users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                    name:
                      type: string
                    email:
                      type: string

  /users/{id}:
    get:
      summary: Get a single user by ID
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Returns a user
          content:
            application/json:
              schema:
                type: object
                properties:
                  _id:
                    type: string
                  name:
                    type: string
                  email:
                    type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
