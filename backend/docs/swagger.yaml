openapi: 3.0.3
info:
  title: Task Management API
  version: 1.0.0
  description: API for managing tasks with JWT authentication

servers:
  - url: /api
    description: Base URL

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - email
                - password
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /auth/login:
    post:
      summary: Login user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /tasks:
    get:
      summary: Get tasks created by the current logged-in user (with filters and pagination)
      tags:
        - Tasks
      parameters:
        - in: query
          name: status
          schema:
            type: string
          description: Filter tasks by status
        - in: query
          name: search
          schema:
            type: string
          description: Search tasks by title
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter tasks with dueDate >= startDate
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter tasks with dueDate <= endDate
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
          description: Number of tasks per page
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of tasks or paginated response
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  - type: object
                    properties:
                      tasks:
                        type: array
                        items:
                          $ref: '#/components/schemas/Task'
                      page:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
                      totalTasks:
                        type: integer

    post:
      summary: Create a new task (assignedUser set to current logged-in user)
      tags:
        - Tasks
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '200':
          description: Task created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{id}:
    get:
      summary: Get a task by ID (must belong to current user)
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found

    put:
      summary: Update a task by ID (must belong to current user)
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskInput'
      responses:
        '200':
          description: Task updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '404':
          description: Task not found

    delete:
      summary: Delete a task by ID (must belong to current user)
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string

    Task:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [Pending, In Progress, Completed]
        assignedUser:
          $ref: '#/components/schemas/User'
        dueDate:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
